use std::math
use std::random
use std::collections

struct Box<T> {
    value: T
}

fn main() {
    // Start time for benchmark
    let start = timestamp()

    // Generate random boxes
    let mut boxes: [Box<i64>] = []
    for i in (0 as i64)..(100 as i64) {
        boxes.push(Box<i64>{ value: random.randint(0 as i32, 99 as i32) as i64 })
    }

    // Count frequency of tens using a Map from std::collections
    let freq = collections.map_new<i64, i64>()
    for i in (0 as i64)..len(boxes) as i64 {
        let b = boxes[i as i32]
        let bucket = b.value / (10 as i64)
        let count = collections.map_get<i64, i64>(freq, bucket, 0 as i64)
        collections.map_put<i64, i64>(freq, bucket, count + (1 as i64))
    }

    // Perform some math heavy work
    let mut total: f64 = 0.0
    for i in (0 as i64)..(100 as i64) {
        total = total + math.sqrt(random.uniform(1.0, 1000.0))
    }
    print(math.round(total))

    // Iterate over the frequency map
    let keys = collections.map_keys<i64, i64>(freq)
    for i in (0 as i64)..len(keys) as i64 {
        let k = keys[i as i32]
        let v = collections.map_get<i64, i64>(freq, k, 0 as i64)
        print(k * 10 as i64)
        print(v)
    }

    // Print elapsed seconds
    let elapsed = timestamp() - start
    print(elapsed)
}
