fn fibonacci_iter(n: i64) -> i64 {
    if n <= (0 as i64) {
        return 0 as i64
    }
    if n == (1 as i64) {
        return 1 as i64
    }

    let mut a: i64 = 0
    let mut b: i64 = 1
    let mut c: i64 = 0
    let mut i: i64 = 2

    while i <= n {
        c = a + b
        a = b
        b = c
        i = i + (1 as i64)
    }

    return b
}

fn main() {
    let start = timestamp()
    let mut results: [i64] = []
    for i in (0 as i64)..(500 as i64) {
        let value = fibonacci_iter(20 as i64)
        results.push(value)
    }
    // Print the last computed value to match previous behavior
    let last = results[len(results) - (1 as i64) as i32]
    print(last)
    let elapsed = timestamp() - start
    print(elapsed)
}
