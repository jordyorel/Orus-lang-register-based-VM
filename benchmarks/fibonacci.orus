fn fibonacci_iter(n: i32) -> i32 {
    if n <= 0 {
        return 0
    }
    if n == 1 {
        return 1
    }

    let mut a: i32 = 0
    let mut b: i32 = 1
    let mut c: i32 = 0
    let mut i: i32 = 2

    while i <= n {
        c = a + b
        a = b
        b = c
        i = i + 1
    }

    return b
}

fn main() {
    let start = timestamp()
    let mut results: [i32] = []
    for i in 0..500 {
        let value = fibonacci_iter(20)
        results.push(value)
    }
    // Print the last computed value to match previous behavior
    let last = results[len(results) - 1]
    print(last)
    let elapsed = timestamp() - start
    print(elapsed)
}
