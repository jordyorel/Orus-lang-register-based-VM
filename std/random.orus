
// Linear Congruential Generator state
static mut SEED: u64 = 123456789u

fn rand_u64() -> u64 {
    // Update the global seed using LCG parameters
    SEED = ((SEED as i64 * 6364136223846793005 + 1) as u64)
    return SEED
}

// Set the seed for reproducible sequences
pub fn set_seed(seed: u64) {
    SEED = seed
}

// Automatically seed the generator when the module is loaded
set_seed(timestamp() as u64)

// Return a float in the range [0.0, 1.0)
pub fn random() -> f64 {
    // Divide by 2^64-1 to map to [0,1)
    return (rand_u64() as f64) / 18446744073709551615.0
}

// Return an integer in [min, max]
pub fn randint(min: i32, max: i32) -> i32 {
    let r: f64 = random()
    let range: f64 = (max - min + 1) as f64
    let offset: i32 = (r * range) as i32
    return min + offset
}

// Return a float in [a, b]
pub fn uniform(a: f64, b: f64) -> f64 {
    return a + (b - a) * random()
}

// Choose a random element from the array
pub fn choice<T>(arr: [T]) -> T {
    let i = randint(0 as i32, len(arr) - 1 as i32)
    return arr[i]
}

// Shuffle the array in-place using Fisher-Yates
pub fn shuffle<T>(arr: [T]) {
    let n = len(arr)
    for i in 0 as i32..n {
        let j = randint(i, n - 1 as i32)
        let temp = arr[i]
        arr[i] = arr[j]
        arr[j] = temp
    }
}

// Return k unique elements sampled from the array
pub fn sample<T>(arr: [T], k: i32) -> [T] {
    let copy: [T; 0] = arr[..]
    shuffle(copy)
    return copy[0 as i32..k]
}

// TODO: additional distributions like gauss require math.log/cos/sin
