pub const PI: f64 = 3.141592653589793
pub const E: f64 = 2.718281828459045
pub const TAU: f64 = 6.283185307179586

pub fn abs<T: Numeric>(x: T) -> T {
    let zero = x - x
    if x < zero {
        return -x
    }
    return x
}

pub fn clamp<T: Comparable>(x: T, min_val: T, max_val: T) -> T {
    if x < min_val {
        return min_val
    }
    if x > max_val {
        return max_val
    }
    return x
}

pub fn pow(base: f64, exponent: i32) -> f64 {
    let mut b = base
    let mut e = exponent
    let mut result: f64 = 1.0
    if e < (0 as i32) {
        b = 1.0 / b
        e = -e
    }
    while e > (0 as i32) {
        if (e & (1 as i32)) == (1 as i32) {
            result = result * b
        }
        e = e >> (1 as i32)
        b = b * b
    }
    return result
}

pub fn sqrt(x: f64) -> f64 {
    if x <= 0.0 {
        return 0.0
    }
    let mut guess = x / 2.0
    let mut last = 0.0
    while abs(guess - last) > 0.0000001 {
        last = guess
        guess = (guess + x / guess) / 2.0
    }
    return guess
}

pub fn floor(x: f64) -> i32 {
    let i: i32 = x as i32
    if x < 0.0 and (x != (i as f64)) {
        return i - 1 as i32
    }
    return i
}

pub fn ceil(x: f64) -> i32 {
    let i: i32 = x as i32
    if x > 0.0 and (x != (i as f64)) {
        return i + 1 as i32
    }
    return i
}

pub fn round(x: f64) -> i32 {
    return floor(x + 0.5)
}

pub fn sign<T: Numeric>(x: T) -> i32 {
    let zero = x - x
    if x > zero {
        return 1 as i32
    }
    if x < zero {
        return -1 as i32
    }
    return 0 as i32
}

pub fn average(values: [f64]) -> f64 {
    if len(values) == 0 as i32 {
        return 0.0
    }
    return sum(values) / (len(values) as f64)
}

pub fn median(values: [f64]) -> f64 {
    if len(values) == 0 as i32 {
        return 0.0
    }
    let sortedVals = sorted(values)
    let mid: i32 = len(sortedVals) / 2 as i32
    if (len(sortedVals) & (1 as i32)) == 1 as i32 {
        return sortedVals[mid]
    }
    return (sortedVals[mid - 1 as i32] + sortedVals[mid]) / 2.0
}

pub fn mod<T: Numeric>(a: T, b: T) -> T {
    let mut r = a % b
    let zero = a - a
    if r < zero {
        r = r + b
    }
    return r
}
