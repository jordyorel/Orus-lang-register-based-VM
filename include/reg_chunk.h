#ifndef ORUS_REG_CHUNK_H
#define ORUS_REG_CHUNK_H

#include "common.h"
#include "value.h"

#define REGISTER_COUNT 256

typedef enum {
    ROP_NOP,
    ROP_MOV,
    ROP_LOAD_CONST,
    ROP_ADD_RR,
    ROP_SUB_RR,
    ROP_MUL_RR,
    ROP_DIV_RR,
    ROP_EQ_I64,
    ROP_NE_I64,
    ROP_LT_I64,
    ROP_LE_I64,
    ROP_GT_I64,
    ROP_GE_I64,
    ROP_JUMP,
    ROP_JZ,
    ROP_CALL,
    // Newly supported opcodes
    ROP_ADD_I32,
    ROP_SUB_I32,
    ROP_MUL_I32,
    ROP_DIV_I32,
    ROP_ADD_U32,
    ROP_SUB_U32,
    ROP_MUL_U32,
    ROP_DIV_U32,
    ROP_ADD_U64,
    ROP_SUB_U64,
    ROP_MUL_U64,
    ROP_DIV_U64,
    ROP_NEG_I32,
    ROP_NEG_U32,
    ROP_NEG_U64,
    ROP_AND,
    ROP_OR,
    ROP_NOT,
    ROP_BIT_AND_I32,
    ROP_BIT_AND_U32,
    ROP_BIT_OR_I32,
    ROP_BIT_OR_U32,
    ROP_BIT_XOR_I32,
    ROP_BIT_XOR_U32,
    ROP_BIT_NOT_I32,
    ROP_BIT_NOT_U32,
    ROP_SHIFT_LEFT_I32,
    ROP_SHIFT_RIGHT_I32,
    ROP_SHIFT_LEFT_U32,
    ROP_SHIFT_RIGHT_U32,
    ROP_I32_TO_BOOL,
    ROP_U32_TO_BOOL,
    ROP_BOOL_TO_I32,
    ROP_BOOL_TO_U32,
    ROP_BOOL_TO_F64,
    ROP_F64_TO_BOOL,
    ROP_I32_TO_F64,
    ROP_U32_TO_F64,
    ROP_I32_TO_U32,
    ROP_U32_TO_I32,
    ROP_I32_TO_I64,
    ROP_U32_TO_I64,
    ROP_I64_TO_I32,
    ROP_I64_TO_U32,
    ROP_I32_TO_U64,
    ROP_U32_TO_U64,
    ROP_U64_TO_I32,
    ROP_U64_TO_U32,
    ROP_U64_TO_F64,
    ROP_F64_TO_U64,
    ROP_F64_TO_I32,
    ROP_F64_TO_U32,
    ROP_I64_TO_F64,
    ROP_F64_TO_I64,
    ROP_I32_TO_STRING,
    ROP_U32_TO_STRING,
    ROP_F64_TO_STRING,
    ROP_BOOL_TO_STRING,
    ROP_ARRAY_TO_STRING,
    ROP_PRINT,
    ROP_PRINT_NO_NL,
    ROP_LOAD_GLOBAL,
    ROP_STORE_GLOBAL,
    ROP_ADD_F64,
    ROP_SUB_F64,
    ROP_MUL_F64,
    ROP_DIV_F64,
    ROP_MOD_I64,
    ROP_BIT_AND_I64,
    ROP_BIT_OR_I64,
    ROP_BIT_XOR_I64,
    ROP_BIT_NOT_I64,
    ROP_SHL_I64,
    ROP_SHR_I64,
    ROP_MAKE_ARRAY,
    ROP_ARRAY_GET,
    ROP_ARRAY_SET,
    ROP_ARRAY_PUSH,
    ROP_ARRAY_POP,
    ROP_LEN,
    ROP_I64_TO_STRING,
    ROP_ARRAY_RESERVE,
    ROP_CONCAT,
    ROP_TYPE_OF_I32,
    ROP_TYPE_OF_I64,
    ROP_TYPE_OF_U32,
    ROP_TYPE_OF_U64,
    ROP_TYPE_OF_F64,
    ROP_TYPE_OF_BOOL,
    ROP_TYPE_OF_STRING,
    ROP_TYPE_OF_ARRAY,
    ROP_GC_PAUSE,
    ROP_GC_RESUME,
    /* Newly added opcodes */
    ROP_ADD_I64,
    ROP_ADD_NUMERIC,
    ROP_BOOL_TO_I64,
    ROP_BOOL_TO_U64,
    ROP_BREAK,
    ROP_CALL_NATIVE,
    ROP_CONSTANT,
    ROP_CONSTANT_LONG,
    ROP_CONTINUE,
    /* Auto-generated opcodes to mirror stack VM */
    ROP_DEFINE_GLOBAL,
    ROP_DIVIDE_F64,
    ROP_DIVIDE_I32,
    ROP_DIVIDE_I64,
    ROP_DIVIDE_NUMERIC,
    ROP_DIVIDE_U32,
    ROP_DIVIDE_U64,
    ROP_EQUAL,
    ROP_EQUAL_I64,
    ROP_FORMAT_PRINT,
    ROP_FORMAT_PRINT_NO_NL,
    ROP_GET_GLOBAL,
    ROP_GREATER_EQUAL_F64,
    ROP_GREATER_EQUAL_I32,
    ROP_GREATER_EQUAL_I64,
    ROP_GREATER_EQUAL_U32,
    ROP_GREATER_EQUAL_U64,
    ROP_GREATER_F64,
    ROP_GREATER_I32,
    ROP_GREATER_I64,
    ROP_GREATER_U32,
    ROP_GREATER_U64,
    ROP_I64_CONST,
    ROP_I64_TO_BOOL,
    ROP_I64_TO_U64,
    ROP_IMPORT,
    ROP_INC_I64,
    ROP_ITER_NEXT_I64,
    ROP_JUMP_IF_FALSE,
    ROP_JUMP_IF_LT_I64,
    ROP_JUMP_IF_TRUE,
    ROP_LEN_ARRAY,
    ROP_LEN_STRING,
    ROP_LESS_EQUAL_F64,
    ROP_LESS_EQUAL_I32,
    ROP_LESS_EQUAL_I64,
    ROP_LESS_EQUAL_U32,
    ROP_LESS_EQUAL_U64,
    ROP_LESS_F64,
    ROP_LESS_I32,
    ROP_LESS_I64,
    ROP_LESS_U32,
    ROP_LESS_U64,
    ROP_LOOP,
    ROP_MODULO_I32,
    ROP_MODULO_I64,
    ROP_MODULO_NUMERIC,
    ROP_MODULO_U32,
    ROP_MODULO_U64,
    ROP_MULTIPLY_F64,
    ROP_MULTIPLY_I32,
    ROP_MULTIPLY_I64,
    ROP_MULTIPLY_NUMERIC,
    ROP_MULTIPLY_U32,
    ROP_MULTIPLY_U64,
    ROP_NEGATE_F64,
    ROP_NEGATE_I32,
    ROP_NEGATE_I64,
    ROP_NEGATE_NUMERIC,
    ROP_NEGATE_U32,
    ROP_NEGATE_U64,
    ROP_NIL,
    ROP_NOT_EQUAL,
    ROP_NOT_EQUAL_I64,
    ROP_POP,
    ROP_POP_EXCEPT,
    ROP_PRINT_BOOL,
    ROP_PRINT_BOOL_NO_NL,
    ROP_PRINT_F64,
    ROP_PRINT_F64_NO_NL,
    ROP_PRINT_I32,
    ROP_PRINT_I32_NO_NL,
    ROP_PRINT_I64,
    ROP_PRINT_I64_NO_NL,
    ROP_PRINT_STRING,
    ROP_PRINT_STRING_NO_NL,
    ROP_PRINT_U32,
    ROP_PRINT_U32_NO_NL,
    ROP_PRINT_U64,
    ROP_PRINT_U64_NO_NL,
    ROP_RETURN,
    ROP_SETUP_EXCEPT,
    ROP_SET_GLOBAL,
    ROP_SHIFT_LEFT_I64,
    ROP_SHIFT_RIGHT_I64,
    ROP_SLICE,
    ROP_SUBSTRING,
    ROP_SUBTRACT_F64,
    ROP_SUBTRACT_I32,
    ROP_SUBTRACT_I64,
    ROP_SUBTRACT_NUMERIC,
    ROP_SUBTRACT_U32,
    ROP_SUBTRACT_U64,
    ROP_U64_TO_BOOL,
    ROP_U64_TO_I64,
    ROP_U64_TO_STRING,
    /* Newly added typed float comparisons */
    ROP_EQ_F64,
    ROP_NE_F64,
    /* Builtin function opcodes */
    ROP_RANGE,
    ROP_SUM,
    ROP_MIN,
    ROP_MAX,
    ROP_IS_TYPE,
    ROP_INPUT,
    ROP_INT,
    ROP_FLOAT,
    ROP_TIMESTAMP,
    ROP_SORTED,
    ROP_MODULE_NAME,
    ROP_MODULE_PATH,
    ROP_NATIVE_POW,
    ROP_NATIVE_SQRT,
    ROP_CALL_BUILTIN_SLICE,
    ROP_SPILL_REG,
    ROP_UNSPILL_REG,
} RegisterOp;

typedef struct {
    uint8_t opcode; // RegisterOp
    uint8_t dst;
    uint8_t src1;
    uint8_t src2;
} RegisterInstr;

typedef struct {
    int count;
    int capacity;
    RegisterInstr* code;
    ValueArray constants;
    int functionOffsets[UINT8_COUNT];
    uint8_t functionRegCount[UINT8_COUNT];
    int functionCount;
} RegisterChunk;

void initRegisterChunk(RegisterChunk* chunk);
void freeRegisterChunk(RegisterChunk* chunk);
void writeRegisterInstr(RegisterChunk* chunk, RegisterInstr instr);
int addRegisterConstant(RegisterChunk* chunk, Value value);

#endif // ORUS_REG_CHUNK_H
