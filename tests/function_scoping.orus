// Test for scoping and variable shadowing in functions
// This tests how the VM handles variables with the same name in different scopes

let global_var = 100

// Test function with parameter shadowing global
fn test_shadow(global_var: i32) -> i32 {
    return global_var * 2  // Should use parameter, not global
}

// Function with local shadowing of parameter
fn test_local_shadow(x: i32) -> i32 {
    let x = x + 5  // Local shadows parameter
    return x
}

// Nested scoping test
fn test_nested_scope(a: i32) -> i32 {
    let b = a * 2
    
    if a > 5 {
        let b = a * 3  // Shadows outer b
        return b
    }
    
    return b
}

// Function that accesses globals
fn access_global() -> i32 {
    return global_var
}

// Function that modifies a global
fn modify_global() -> i32 {
    global_var = 200
    return global_var
}

print("Testing variable shadowing:")
print(test_shadow(50))  // Should print 100 (50*2), not 200 (100*2)

print("Global var is still:")
print(global_var)  // Should print 100

print("Testing local shadowing:")
print(test_local_shadow(10))  // Should print 15 (10+5)

print("Testing nested scope shadowing:")
print(test_nested_scope(3))  // Should print 6 (3*2)
print(test_nested_scope(10))  // Should print 30 (10*3)

print("Testing global access:")
print(access_global())  // Should print 100

print("Testing global modification:")
print(modify_global())  // Should print 200
print(global_var)  // Should print 200