struct BinarySearch {}

impl BinarySearch {
    fn binary_search(arr: [i32; 8], target: i32) -> i32 {
        let mut left: i32 = 0
        let mut right: i32 = 7
        let mut mid: i32 = 0

        while left <= right {
            mid = left + (right - left) / (2 as i32)

            if arr[mid] == target {
                return mid
            }

            if arr[mid] < target {
                left = mid + (1 as i32)
            } else {
                right = mid - (1 as i32)
            }
        }

        return -1 as i32
    }
    
    fn array_to_string(arr: [i32; 8]) -> string {
        let mut result: string = "["
        for i in (0 as i32)..(8 as i32) {
            result = result + arr[i]
            if i < (7 as i32) {
                result = result + ", "
            }
        }
        result = result + "]"
        return result
    }
}


fn main() {
    let test_array: [i32; 8] = [1, 3, 5, 7, 9, 11, 13, 15]

    print("Binary Search Test Cases:")
    print("Array: {}", array_to_string(test_array))

    let target1: i32 = 7
    let result1: i32 = binary_search(test_array, target1)
    print("Searching for {}: Found at index {}", target1, result1)

    let target2: i32 = 1
    let result2: i32 = binary_search(test_array, target2)
    print("Searching for {}: Found at index {}", target2, result2)

    let target3: i32 = 15
    let result3: i32 = binary_search(test_array, target3)
    print("Searching for {}: Found at index {}", target3, result3)

    let target4: i32 = 10
    let result4: i32 = binary_search(test_array, target4)
    print("Searching for {}: Found at index {}", target4, result4)
}
