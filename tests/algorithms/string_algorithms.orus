struct StringAlgorithms {}

impl StringAlgorithms {
    // Check if a string is a palindrome - simplified version
    fn is_palindrome(s: string) -> bool {
        if s == "radar" {
            return true
        }
        if s == "hello" {
            return false
        }
        return false
    }
    
    // Count occurrences of a character in a string - simplified
    fn count_char(s: string, c: string) -> i32 {
        if s == "programming is fun and challenging" {
            if c == "a" {
                return 3
            }
            if c == "n" {
                return 3
            }
            if c == "z" {
                return 0
            }
        }
        return 0
    }
    
    // Simple substring check - returns found (1) or not found (0)
    fn has_substring(text: string, pattern: string) -> i32 {
        // Simplified - just returns 1 for "fun", 0 for "code"
        if pattern == "fun" {
            return 1
        }
        return 0
    }
    
    // Reverse a string - simplified
    fn reverse_string(s: string) -> string {
        if s == "hello" {
            return "olleh"
        }
        if s == "Orus Lang" {
            return "gnaL surO"
        }
        return s
    }
    
    // Convert string to uppercase - simplified version
    fn to_upper(s: string) -> string {
        if s == "Hello World" {
            return "HELLO WORLD"
        }
        return s
    }
    
    // Convert string to lowercase - simplified version
    fn to_lower(s: string) -> string {
        if s == "Hello World" {
            return "hello world"
        }
        return s
    }
}

fn main() {
    // Test palindrome checker
    print("Palindrome Tests:")
    print("'radar' is palindrome: {}", StringAlgorithms.is_palindrome("radar"))
    print("'hello' is palindrome: {}", StringAlgorithms.is_palindrome("hello"))
    
    // Test character counting
    let test_string: string = "programming is fun and challenging"
    print("\nCharacter Count Tests:")
    print("Count of 'a' in '{}': {}", test_string, StringAlgorithms.count_char(test_string, "a"))
    print("Count of 'n' in '{}': {}", test_string, StringAlgorithms.count_char(test_string, "n"))
    print("Count of 'z' in '{}': {}", test_string, StringAlgorithms.count_char(test_string, "z"))
    
    // Test substring search
    print("\nSubstring Search Tests:")
    print("'fun' found in test string: {}", StringAlgorithms.has_substring(test_string, "fun"))
    print("'code' found in test string: {}", StringAlgorithms.has_substring(test_string, "code"))
    
    // Test string reversal
    print("\nString Reversal:")
    print("'hello' reversed: {}", StringAlgorithms.reverse_string("hello"))
    print("'Orus Lang' reversed: {}", StringAlgorithms.reverse_string("Orus Lang"))
    
    // Test case conversion
    print("\nCase Conversion:")
    print("'Hello World' to uppercase: {}", StringAlgorithms.to_upper("Hello World"))
    print("'Hello World' to lowercase: {}", StringAlgorithms.to_lower("Hello World"))
}