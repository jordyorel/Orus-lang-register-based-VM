// Linear congruential generator example using u32 seed
fn rand_u32(seed: [u32; 1]) -> u32 {
    let a: u32 = 1664525 as u32
    let c: u32 = 1013904223 as u32
    let next: u32 = a * seed[0] + c
    seed[0] = next
    return next
}

fn rand(seed: [u32; 1]) -> f64 {
    return (rand_u32(seed) as f64) / 4294967296.0
}

// Returns an unsigned integer in [min, max]
fn rand_uint(seed: [u32; 1], min: u32, max: u32) -> u32 {
    let range: u32 = max - min + (1 as u32)
    return min + (rand_u32(seed) % range)
}

fn main() {
    let seed: [u32; 1] = [123456789 as u32]

    print("Random float between 0 and 1: {}", rand(seed))

    let min: u32 = 1 as u32
    let max: u32 = 10 as u32

    let a = rand_uint(seed, min, max)
    let b = rand_uint(seed, min, max)
    let c = rand_uint(seed, min, max)

    print("Random uints between 1 and 10: {}, {}, {}", a, b, c)
}
