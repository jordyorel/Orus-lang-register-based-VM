// Implementation of graph algorithms in Orus
// This includes BFS and DFS traversals represented using adjacency lists

struct Graph {
    // Our graph will be implemented as an adjacency list
    // Each graph[i] is an array representing neighbors of vertex i
    // We'll use a fixed size of 6 vertices for this example
    vertices: i32,
    // We'll implement the adjacency list as a 2D array
    // Each row represents a vertex, and the values represent connections (1 = connected, 0 = not connected)
    adj_matrix: [i32; 36]  // 6x6 matrix flattened to 1D
}

impl Graph {
    // Initialize a new graph with n vertices
    fn new(n: i32) -> Graph {
        let g: Graph = Graph {
            vertices: n,
            adj_matrix: [0 as i32, 0 as i32, 0 as i32, 0 as i32, 0 as i32, 0 as i32, 0 as i32, 0 as i32, 0 as i32, 0 as i32, 0 as i32, 0 as i32, 0 as i32, 0 as i32, 0 as i32, 0 as i32, 0 as i32, 0 as i32, 0 as i32, 0 as i32, 0 as i32, 0 as i32, 0 as i32, 0 as i32, 0 as i32, 0 as i32, 0 as i32, 0 as i32, 0 as i32, 0 as i32, 0 as i32, 0 as i32, 0 as i32, 0 as i32, 0 as i32, 0 as i32]
        }
        return g
    }
    
    // Add an edge between vertices u and v
    fn add_edge(self, u: i32, v: i32) -> bool {
        if u < (0 as i32) or u >= self.vertices or v < (0 as i32) or v >= self.vertices {
            return false  // Invalid vertex
        }
        
        // Calculate positions in the flattened 2D array
        let pos1: i32 = u * self.vertices + v
        let pos2: i32 = v * self.vertices + u
        
        // Set the connections (for undirected graph, set both)
        self.adj_matrix[pos1] = 1 as i32
        self.adj_matrix[pos2] = 1 as i32
        
        return true
    }
    
    // Get all adjacent vertices to vertex v
    fn get_adjacent(self, v: i32, result: [i32; 6]) -> i32 {
        let mut count: i32 = 0
        let mut i: i32 = 0
        
        // Find all vertices that are connected to v
        while i < self.vertices {
            let pos: i32 = v * self.vertices + i
            if self.adj_matrix[pos] == (1 as i32) {
                result[count] = i
                count = count + (1 as i32)
            }
            i = i + (1 as i32)
        }
        
        return count
    }
    
    // Breadth-First Search traversal
    fn bfs(self, start: i32) -> string {
        if start < (0 as i32) or start >= self.vertices {
            return "Invalid starting vertex"
        }
        
        // Array to track visited vertices
        let mut visited: [i32; 6] = [0, 0, 0, 0, 0, 0]
        
        // Queue for BFS (simplistic implementation with arrays)
        let mut queue: [i32; 6] = [0, 0, 0, 0, 0, 0]
        let mut front: i32 = 0
        let mut rear: i32 = 0
        
        // Result string to track traversal order
        let mut result: string = ""
        
        // Mark the current vertex as visited and enqueue it
        visited[start] = 1 as i32
        queue[rear] = start
        rear = rear + (1 as i32)
        
        while front < rear {
            // Dequeue a vertex and add to result
            let current: i32 = queue[front]
            front = front + (1 as i32)
            
            result = result + current + " "
            
            // Get all adjacent vertices
            let mut adj: [i32; 6] = [0, 0, 0, 0, 0, 0]
            let adj_count: i32 = self.get_adjacent(current, adj)
            
            // Process all adjacent vertices
            let mut j: i32 = 0
            while j < adj_count {
                let adj_vertex: i32 = adj[j]
                
                // If not yet visited, mark as visited and enqueue
                if visited[adj_vertex] == (0 as i32) {
                    visited[adj_vertex] = 1 as i32
                    queue[rear] = adj_vertex
                    rear = rear + (1 as i32)
                }
                j = j + (1 as i32)
            }
        }
        
        return result
    }
    
    // Depth-First Search traversal (iterative to avoid recursion issues)
    fn dfs(self, start: i32) -> string {
        if start < (0 as i32) or start >= self.vertices {
            return "Invalid starting vertex"
        }

        // Array to track visited vertices
        let mut visited: [i32; 6] = [0, 0, 0, 0, 0, 0]

        // Simple stack for DFS
        let mut stack: [i32; 6] = [0, 0, 0, 0, 0, 0]
        let mut top: i32 = 0

        // Result string to track traversal order
        let mut result: string = ""

        // Push starting vertex
        stack[top] = start
        top = top + (1 as i32)

        while top > (0 as i32) {
            // Pop vertex from stack
            top = top - (1 as i32)
            let current: i32 = stack[top]

            if visited[current] == (1 as i32) {
                continue
            }

            visited[current] = 1 as i32
            result = result + current + " "

            // Get adjacent vertices
            let mut adj: [i32; 6] = [0, 0, 0, 0, 0, 0]
            let adj_count: i32 = self.get_adjacent(current, adj)

            // Push neighbors in reverse order to mimic recursive DFS order
            let mut i: i32 = adj_count - (1 as i32)
            while i >= (0 as i32) {
                let adj_vertex: i32 = adj[i]
                if visited[adj_vertex] == (0 as i32) {
                    stack[top] = adj_vertex
                    top = top + (1 as i32)
                }
                i = i - (1 as i32)
            }
        }

        return result
    }
}

fn main() {
    // Create a graph with 6 vertices
    let graph: Graph = Graph.new(6 as i32)
    
    // Add edges to create a sample graph
    graph.add_edge(0 as i32, 1 as i32)
    graph.add_edge(0 as i32, 2 as i32)
    graph.add_edge(1 as i32, 3 as i32)
    graph.add_edge(1 as i32, 4 as i32)
    graph.add_edge(2 as i32, 4 as i32)
    graph.add_edge(3 as i32, 5 as i32)
    graph.add_edge(4 as i32, 5 as i32)
    
    print("Graph traversals starting from vertex 0:")
    print("BFS traversal: {}", graph.bfs(0 as i32))
    print("DFS traversal: {}", graph.dfs(0 as i32))
}
