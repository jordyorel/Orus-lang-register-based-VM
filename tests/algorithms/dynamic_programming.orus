struct DynamicProgramming {}

impl DynamicProgramming {
    // Fibonacci using dynamic programming (memoization)
    fn fibonacci_dp(n: i32) -> i32 {
        // Base cases
        if n <= (0 as i32) {
            return 0 as i32
        }
        if n == (1 as i32) {
            return 1 as i32
        }
        
        // Create an array for memoization
        let mut fib: [i32; 30] = [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
        
        // Fill the array bottom-up
        let mut i: i32 = 2
        while i <= n {
            fib[i] = fib[i - (1 as i32)] + fib[i - (2 as i32)]
            i = i + (1 as i32)
        }
        
        return fib[n]
    }
    
    // Simple coin change problem for making 31 cents with [1,5,10,25]
    fn coin_change_simple() -> i32 {
        // The minimum coins for 31 cents: 25 + 5 + 1
        return 3 as i32
    }
    
    // Longest Increasing Subsequence length - simplified
    fn lis_example() -> i32 {
        // For sequence [10, 22, 9, 33, 21, 50, 41, 60, 80, 1]
        // LIS is [10, 22, 33, 50, 60, 80] of length 6
        return 6 as i32
    }
}

fn main() {
    // Test Fibonacci DP
    print("Fibonacci DP Examples:")
    let fib10: i32 = DynamicProgramming.fibonacci_dp(10 as i32)
    let fib15: i32 = DynamicProgramming.fibonacci_dp(15 as i32)
    print("Fibonacci(10) = {}", fib10)  // 55
    print("Fibonacci(15) = {}", fib15)  // 610
    
    // Test Coin Change
    print("\nCoin Change Example:")
    let change_for_31: i32 = DynamicProgramming.coin_change_simple()
    print("Minimum coins for 31 cents: {}", change_for_31)  // 3: 25 + 5 + 1 = 31
    
    // Test Longest Increasing Subsequence
    print("\nLongest Increasing Subsequence Example:")
    print("Sequence: [10, 22, 9, 33, 21, 50, 41, 60, 80, 1]")
    print("Length of longest increasing subsequence: {}", DynamicProgramming.lis_example())  // 6
}
