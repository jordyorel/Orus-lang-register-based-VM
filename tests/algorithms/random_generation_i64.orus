// Linear congruential generator example rewritten to use i64
struct RNG {
    seed: i64,
}

impl RNG {
    fn new(seed: i64) -> RNG {
        return RNG{ seed: seed }
    }

    fn next(self) -> i64 {
        let multiplier: i64 = 1103515245
        let increment: i64 = 12345
        let modulus: i64 = 2147483648
        self.seed = (self.seed * multiplier + increment) % modulus
        return self.seed
    }

    fn rand_float(self) -> f64 {
        let next_val: i64 = self.next()
        return ((next_val as i32) as f64) / 2147483648.0
    }

    fn rand_int(self, min: i64, max: i64) -> i64 {
        let range: i64 = max - min + 1
        return min + (self.next() % range)
    }

    fn choice<T>(self, items: [T]) -> T {
        let idx: i32 = self.rand_int(0, (len(items) - 1) as i64) as i32
        return items[idx]
    }

    fn shuffle<T>(self, items: [T]) {
        let mut i: i32 = len(items) - (1 as i32)
        while i > (0 as i32) {
            let j: i32 = self.rand_int(0, i as i64) as i32
            let temp = items[i]
            items[i] = items[j]
            items[j] = temp
            i = i - (1 as i32)
        }
    }
}

fn main() {
    let rng = RNG.new(1234 as i64)

    let val = rng.rand_int(1 as i64, 100 as i64)
    print("Random integer: {}", val)

    let x = rng.rand_float()
    print("Random float: {}", x)

    // The choice and shuffle functions demonstrate RNG usage with arrays.
    // Example usage of choice and shuffle
    // (Uncomment the following lines if array indexing with casted indices is supported)
    let names = ["Alice", "Bob", "Cleo"]
    let selected = rng.choice(names)
    print("Picked: {}", selected)

    let numbers = [1, 2, 3, 4, 5]
    rng.shuffle(numbers)
    print("Shuffled: {}, {}, {}, {}, {}", numbers[0 as i32], numbers[1 as i32], numbers[2 as i32], numbers[3 as i32], numbers[4 as i32])
}
