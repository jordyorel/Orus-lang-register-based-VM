// Linear congruential generator example
fn rand_i32(seed: [i32; 1]) -> i32 {
    let a: i32 = 1664525
    let c: i32 = 1013904223
    let next: i32 = a * seed[0 as i32] + c
    seed[0 as i32] = next
    return next
}

fn rand(seed: [i32; 1]) -> f64 {
    return (rand_i32(seed) as f64) / 4294967296.0
}

// Returns an integer in [min, max]
fn rand_int(seed: [i32; 1], min: i32, max: i32) -> i32 {
    let range: i32 = max - min + (1 as i32)
    return min + (rand_i32(seed) % range)
}

fn main() {
    let seed: [i32; 1] = [123456789]

    print("Random float between 0 and 1: {}", rand(seed))

    let a = rand_int(seed, 1 as i32, 10 as i32)
    let b = rand_int(seed, 1 as i32, 10 as i32)
    let c = rand_int(seed, 1 as i32, 10 as i32)

    print("Random ints between 1 and 10: {}, {}, {}", a, b, c)
}
