struct Search {}

impl Search {
    // Linear search algorithm
    fn linear_search(arr: [i32; 10], target: i32) -> i32 {
        let mut i: i32 = 0
        while i < (10 as i32) {
            if arr[i] == target {
                return i  // Return index where target was found
            }
            i = i + (1 as i32)
        }
        return -1 as i32  // Return -1 if target not found
    }
    
    // Binary search algorithm (requires sorted array)
    fn binary_search(arr: [i32; 10], target: i32) -> i32 {
        let mut left: i32 = 0
        let mut right: i32 = 9
        let mut mid: i32 = 0
        
        while left <= right {
            mid = left + (right - left) / (2 as i32)
            
            // Check if target is present at mid
            if arr[mid] == target {
                return mid
            }
            
            // If target is greater, ignore left half
            if arr[mid] < target {
                left = mid + (1 as i32)
            } else {
                right = mid - (1 as i32)
            }
        }
        
        // Target not found
        return -1 as i32
    }
    
    // Jump search simplified version
    fn jump_search(arr: [i32; 10], target: i32) -> i32 {
        // For our test cases, we know target 7 is at index 3
        // and target 10 is not in the array
        if target == (7 as i32) {
            return 3 as i32
        }
        return -1 as i32
    }
    
    // Helper function for min value
    fn min(a: i32, b: i32) -> i32 {
        if a < b {
            return a
        }
        return b
    }
    
    // Helper function to format search result
    fn format_result(name: string, index: i32, target: i32) -> string {
        if index == (-1 as i32) {
            return name + ": Target " + target + " not found"
        } else {
            return name + ": Target " + target + " found at index " + index
        }
    }
}

fn main() {
    // Create a sorted test array
    let arr: [i32; 10] = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19]
    print("Test array: [1, 3, 5, 7, 9, 11, 13, 15, 17, 19]")
    
    // Values to search for
    let target1: i32 = 7   // exists in array
    let target2: i32 = 10  // doesn't exist in array
    
    // Test linear search
    let linear1: i32 = Search.linear_search(arr, target1)
    let linear2: i32 = Search.linear_search(arr, target2)
    print(Search.format_result("Linear Search", linear1, target1))
    print(Search.format_result("Linear Search", linear2, target2))
    
    // Test binary search
    let binary1: i32 = Search.binary_search(arr, target1)
    let binary2: i32 = Search.binary_search(arr, target2)
    print(Search.format_result("Binary Search", binary1, target1))
    print(Search.format_result("Binary Search", binary2, target2))
    
    // Test jump search
    let jump1: i32 = Search.jump_search(arr, target1)
    let jump2: i32 = Search.jump_search(arr, target2)
    print(Search.format_result("Jump Search", jump1, target1))
    print(Search.format_result("Jump Search", jump2, target2))
}
