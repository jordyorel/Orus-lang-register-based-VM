# Mixed Types Test
# Tests impl blocks with methods handling different data types

struct Person {
    name: string,
    age: i32,
    height: f64,
    is_student: bool,
}

impl Person {
    fn new(name: string, age: i32, height: f64, is_student: bool) -> Person {
        return Person {
            name: name,
            age: age,
            height: height,
            is_student: is_student,
        }
    }
    
    fn get_name(self) -> string {
        return self.name
    }
    
    fn get_age(self) -> i32 {
        return self.age
    }
    
    fn get_height(self) -> f64 {
        return self.height
    }
    
    fn is_adult(self) -> bool {
        return self.age >= 18
    }
    
    fn birthday(self) {
        self.age = self.age + 1
    }
    
    fn grow(self, inches: f64) {
        self.height = self.height + inches
    }
    
    fn graduate(self) {
        self.is_student = false
    }
    
    fn describe(self) -> string {
        let status: string = ""
        if self.is_student {
            status = "student"
        } else {
            status = "non-student"
        }
        
        let age_status: string = ""
        if self.is_adult() {
            age_status = "adult"
        } else {
            age_status = "minor"
        }
        
        return "{} is a {}-year-old {} {} ({} feet tall)"
    }
}

fn main() {
    # Create person with mixed types
    let person: Person = Person.new("Alice", 17, 5.5, true)
    
    # Test string method
    print("Name: {}", person.get_name())
    
    # Test integer method
    print("Age: {}", person.get_age())
    
    # Test float method
    print("Height: {} feet", person.get_height())
    
    # Test boolean method
    print("Is adult: {}", person.is_adult())
    
    # Test methods that modify state
    person.birthday()
    print("After birthday, age: {}", person.get_age())
    print("Now is adult: {}", person.is_adult())
    
    person.grow(0.2)
    print("After growing, height: {} feet", person.get_height())
    
    person.graduate()
    print("After graduation, description: {}", person.describe())
    
    # Test with different initial values
    let person2: Person = Person.new("Bob", 25, 6.0, false)
    print("Person2 description: {}", person2.describe())
    
    # Expected output:
    # Name: Alice
    # Age: 17
    # Height: 5.5 feet
    # Is adult: false
    # After birthday, age: 18
    # Now is adult: true
    # After growing, height: 5.7 feet
    # After graduation, description: Alice is a 18-year-old adult non-student (5.7 feet tall)
    # Person2 description: Bob is a 25-year-old adult non-student (6 feet tall)
}