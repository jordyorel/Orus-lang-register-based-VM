# Static vs Instance Methods Test
# Tests the difference between static methods and instance methods

struct Counter {
    count: i32,
}

impl Counter {
    # Static method - no self parameter
    fn new() -> Counter {
        return Counter { count: 0 }
    }
    
    # Static method with parameter
    fn with_initial(initial: i32) -> Counter {
        return Counter { count: initial }
    }
    
    # Instance method - has self parameter
    fn increment(self) {
        self.count = self.count + 1
    }
    
    # Instance method with parameter
    fn add(self, amount: i32) {
        self.count = self.count + amount
    }
    
    # Instance method returning value
    fn get_count(self) -> i32 {
        return self.count
    }
    
    # Instance method returning boolean
    fn is_even(self) -> bool {
        return (self.count % 2) == 0
    }
    
    # Static helper method
    fn max_value() -> i32 {
        return 1000
    }
}

fn main() {
    # Test static methods (called on type)
    let counter1: Counter = Counter.new()
    print("New counter: {}", counter1.get_count())
    
    let counter2: Counter = Counter.with_initial(10)
    print("Counter with initial 10: {}", counter2.get_count())
    
    # Test instance methods (called on object)
    counter1.increment()
    print("After increment: {}", counter1.get_count())
    
    counter1.add(5)
    print("After adding 5: {}", counter1.get_count())
    
    # Test instance method returning boolean
    print("Counter1 is even: {}", counter1.is_even())
    
    counter2.add(2)
    print("Counter2 after adding 2: {}", counter2.get_count())
    print("Counter2 is even: {}", counter2.is_even())
    
    # Test static method returning value
    let max: i32 = Counter.max_value()
    print("Max counter value: {}", max)
    
    # Expected output:
    # New counter: 0
    # Counter with initial 10: 10
    # After increment: 1
    # After adding 5: 6
    # Counter1 is even: true
    # Counter2 after adding 2: 12
    # Counter2 is even: true
    # Max counter value: 1000
}