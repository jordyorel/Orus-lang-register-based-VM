# Method Chaining Test
# Tests chaining method calls and methods that return self

struct Calculator {
    value: i32,
}

impl Calculator {
    fn new() -> Calculator {
        return Calculator { value: 0 }
    }
    
    fn add(self, x: i32) -> Calculator {
        self.value = self.value + x
        return self
    }
    
    fn multiply(self, x: i32) -> Calculator {
        self.value = self.value * x
        return self
    }
    
    fn subtract(self, x: i32) -> Calculator {
        self.value = self.value - x
        return self
    }
    
    fn get_result(self) -> i32 {
        return self.value
    }
    
    fn reset(self) -> Calculator {
        self.value = 0
        return self
    }
}

fn main() {
    # Test basic method chaining
    let calc: Calculator = Calculator.new()
    let result1: Calculator = calc.add(10).multiply(2).subtract(5)
    print("Result after add(10).multiply(2).subtract(5): {}", result1.get_result())
    
    # Test longer chain
    let calc2: Calculator = Calculator.new()
    let result2: i32 = calc2.add(5).add(3).multiply(2).subtract(1).get_result()
    print("Result of 5+3 = 8, 8*2 = 16, 16-1 = 15: {}", result2)
    
    # Test reset and chain
    let calc3: Calculator = Calculator.new()
    calc3.add(100)
    print("Before reset: {}", calc3.get_result())
    let final_result: i32 = calc3.reset().add(7).multiply(3).get_result()
    print("After reset and 7*3: {}", final_result)
    
    # Expected output:
    # Result after add(10).multiply(2).subtract(5): 15
    # Result of 5+3 = 8, 8*2 = 16, 16-1 = 15: 15
    # Before reset: 100
    # After reset and 7*3: 21
}