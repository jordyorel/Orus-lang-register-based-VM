// Test for recursive function calls
// Tests the VM's ability to handle recursion properly

// Simple recursive factorial function
fn factorial(n: i32) -> i32 {
    if n <= 1 {
        return 1
    }
    return n * factorial(n - 1)
}

print("Testing factorial recursion:")
print(factorial(0))  // Should print 1
print(factorial(1))  // Should print 1
print(factorial(5))  // Should print 120
print(factorial(10)) // Should print 3628800

// Fibonacci sequence with recursion
fn fibonacci(n: i32) -> i32 {
    if n <= 0 {
        return 0
    }
    if n == 1 {
        return 1
    }
    return fibonacci(n - 1) + fibonacci(n - 2)
}

print("Testing fibonacci recursion:")
print(fibonacci(0))  // Should print 0
print(fibonacci(1))  // Should print 1
print(fibonacci(2))  // Should print 1
print(fibonacci(3))  // Should print 2
print(fibonacci(7))  // Should print 13
print(fibonacci(10)) // Should print 55

// Test mutual recursion
fn isEven(n: i32) -> bool {
    if n == 0 {
        return true
    }
    return isOdd(n - 1)
}

fn isOdd(n: i32) -> bool {
    if n == 0 {
        return false
    }
    return isEven(n - 1)
}

print("Testing mutual recursion:")
print(isEven(0))  // Should print true
print(isEven(1))  // Should print false
print(isEven(10)) // Should print true
print(isOdd(0))   // Should print false
print(isOdd(1))   // Should print true
print(isOdd(10))  // Should print false