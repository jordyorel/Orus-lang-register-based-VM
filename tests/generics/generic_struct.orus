// Tests for generic structs
// This test demonstrates defining and using a basic generic struct

// Define a generic Box structure with a single type parameter T
struct Box<T> {
    item: T
}

// Create boxes with different types
fn main() {
    // Integer box
    let intBox = Box<i32>{item: 42 as i32}
    print("Int box contains: " + intBox.item)
    
    // Float box
    let floatBox = Box<f64>{item: 3.14}
    print("Float box contains: " + floatBox.item)
    
    // String box
    let stringBox = Box<string>{item: "Hello, generics!"}
    print("String box contains: " + stringBox.item)
    
    // Test reassigning values
    intBox.item = 100 as i32
    print("Updated int box: " + intBox.item)
    
    // Test nested generic structures
    let nestedBox = Box<Box<i32> >{item: intBox}
    print("Nested box contains: " + nestedBox.item.item)
}
