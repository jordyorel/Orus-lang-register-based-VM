// Generic struct test (syntax may not be supported yet)
struct Container<T> {
    value: T
}

struct Pair<T, U> {
    first: T
    second: U
}

fn main() {
    // Test generic struct with integer
    let int_container = Container<i32> { value: 42 }
    print("int_container.value = {}", int_container.value)
    
    // Test generic struct with string
    let str_container = Container<string> { value: "hello" }
    print("str_container.value = {}", str_container.value)
    
    // Test generic struct with two types
    let pair = Pair<i32, string> { first: 100, second: "world" }
    print("pair.first = {}, pair.second = {}", pair.first, pair.second)
    
    // Test nested generic
    let nested = Container<Pair<i32, f64>> { 
        value: Pair<i32, f64> { first: 1, second: 2.5 }
    }
    print("nested.value.first = {}", nested.value.first)
    print("nested.value.second = {}", nested.value.second)
}