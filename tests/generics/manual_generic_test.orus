// Manual generic test using existing language features
// This simulates generic behavior without requiring parser support

fn identity_i32(value: i32) -> i32 {
    return value
}

fn identity_f64(value: f64) -> f64 {
    return value
}

fn identity_string(value: string) -> string {
    return value
}

fn max_i32(a: i32, b: i32) -> i32 {
    if a > b {
        return a
    } else {
        return b
    }
}

fn max_f64(a: f64, b: f64) -> f64 {
    if a > b {
        return a
    } else {
        return b
    }
}

fn main() {
    print("Testing generic-like functions with manual type variants:")
    
    // Test identity functions
    let int_val = identity_i32(42)
    print("identity_i32(42) = {}", int_val)
    
    let float_val = identity_f64(3.14)
    print("identity_f64(3.14) = {}", float_val)
    
    let str_val = identity_string("hello")
    print("identity_string(\"hello\") = {}", str_val)
    
    // Test max functions
    let max_int = max_i32(10, 20)
    print("max_i32(10, 20) = {}", max_int)
    
    let max_float = max_f64(2.5, 1.8)
    print("max_f64(2.5, 1.8) = {}", max_float)
    
    print("Generic infrastructure ready for parser integration!")
}