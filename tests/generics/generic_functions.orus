// Generic Functions Test
// Tests defining and using functions with generic type parameters

// Generic identity function
fn identity<T>(value: T) -> T {
    return value
}

// Simple error helper used for demonstration purposes
fn error(msg: string) {
    print("Error: " + msg)
}

// Function that works with any array type
fn firstElement<T>(arr: [T]) -> T {
    if (len(arr) == (0 as i32)) {
        error("Array is empty")
    }
    return arr[0 as i32]
}

// Pair struct for zip results
struct Pair<A, B> {
    first: A
    second: B
}

// Function with multiple type parameters
fn zip<A, B>(arrA: [A], arrB: [B]) -> [Pair<A, B>] {
    let result = []
    let mut length = len(arrA)
    if (len(arrB) < length) {
        length = len(arrB)
    }
    
    for i in (0 as i32)..length {
        let pair = Pair<A, B>{first: arrA[i], second: arrB[i]}
        result.push(pair)
    }
    
    return result
}

// Higher-order function with generic parameters
fn map<T, U>(arr: [T], callback: (T) -> U) -> [U] {
    let result = []
    for i in (0 as i32)..len(arr) {
        result.push(callback(arr[i]))
    }
    return result
}

fn double(x: i32) -> i32 {
    return x * (2 as i32)
}

fn toUpper(s: string) -> string {
    // This is a placeholder - assuming Orus has a built-in way to convert to uppercase
    // If not, this would need to be implemented differently
    return s + " (uppercase)"
}

fn main() {
    // Test the identity function
    let num = identity(42)
    print("Identity of 42: {}", num)
    
    let str = identity("Hello")
    print("Identity of 'Hello': {}", str)
    
    // Test firstElement function
    let numbers = [10, 20, 30, 40]
    print("First number: {}", firstElement(numbers))
    
    let names = ["Alice", "Bob", "Charlie"]
    print("First name: {}", firstElement(names))
    
    // Test zip function
    let ids: [i32] = [1, 2, 3, 4]
    let users = ["user1", "user2", "user3"]
    let zipped = zip(ids, users)
    
    print("Zipped results:")
    for i in (0 as i32)..len(zipped) {
        print("ID: {}, User: {}", zipped[i].first, zipped[i].second)
    }
    
    // Test map function
    let doubled = map(ids, double)
    print("Original numbers: {}", ids)
    print("Doubled numbers: {}", doubled)
    
    let uppercased = map(users, toUpper)
    print("Uppercased users: {}", uppercased)
}
