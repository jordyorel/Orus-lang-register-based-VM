// Enum test with functions and return values
enum Status {
    Success,
    Warning(string),
    Error(i32, string)
}

fn create_success() -> Status {
    return Status.Success
}

fn create_warning(msg: string) -> Status {
    return Status.Warning(msg)
}

fn create_error(code: i32, msg: string) -> Status {
    return Status.Error(code, msg)
}

fn is_success(status: Status) -> bool {
    match status {
        Status.Success => {
            return true
        }
        _ => {
            return false
        }
    }
}

fn get_message(status: Status) -> string {
    match status {
        Status.Success => {
            return "Operation completed successfully"
        }
        Status.Warning(msg) => {
            return msg
        }
        Status.Error(code, msg) => {
            return "Error {}: {}".format(code, msg)
        }
    }
}

fn main() {
    let success = create_success()
    let warning = create_warning("This is a warning")
    let error = create_error(404, "Not found")
    
    let statuses = [success, warning, error]
    
    for status in statuses {
        print("Status: {}", status)
        print("Is success: {}", is_success(status))
        print("Message: {}", get_message(status))
        print("---")
    }
}