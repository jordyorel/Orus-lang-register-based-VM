// Pattern matching with enums
enum Option {
    Some(i32),
    None
}

enum Result {
    Ok(string),
    Error(string)
}

fn process_option(opt: Option) {
    match opt {
        Option.Some(value) => {
            print("Found value: {}", value)
        }
        Option.None => {
            print("No value found")
        }
    }
}

fn process_result(res: Result) {
    match res {
        Result.Ok(message) => {
            print("Success: {}", message)
        }
        Result.Error(error) => {
            print("Error: {}", error)
        }
    }
}

fn main() {
    let some_val = Option.Some(42)
    let none_val = Option.None
    
    let ok_result = Result.Ok("Operation completed")
    let err_result = Result.Error("Something went wrong")
    
    print("Processing options:")
    process_option(some_val)
    process_option(none_val)
    
    print("Processing results:")
    process_result(ok_result)
    process_result(err_result)
}